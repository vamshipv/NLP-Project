import json
from retriever import Retriever
from generator import Generator
import unittest

class TestGen(unittest.TestCase):
    """
    A test suite for validating the Retriever and Generator components of a QA system.

    This class uses Python's unittest framework to:
    - Test the accuracy of generated answers for a set of questions.
    - Verify that the generated answers are grounded in the retrieved source text.

    Attributes:
        None
    """
    
    def baseCase(self):
        return

    def test_generator(self):
        """
        Test the Generator's ability to produce expected answers for a list of questions.

        Steps:
            1. Load and index the document (`winnie_the_pooh.txt`) using the Retriever.
            2. Read the `test_ques_and_ans.jsonl` file line by line.
            3. For each question:
                - Compare the generated answer with the expected answer.

        Prints:
            - The question, generated answer, expected answer, and test result.
        """
        gen = Generator()
        ret = Retriever()
        ret.addDocuments("winnie_the_pooh.txt")
        with open('test_ques_and_ans.jsonl', 'r') as file:
            for line in file:
                line = line.strip()
                if not line:
                    continue
                item = json.loads(line)
                question = item.get("question")
                if question is not None:
                    expected_answer = item.get("expected_answer_contains")
                    print(f"Question is : {question}")
                    retrievedChunks = ret.query(question)
                    context = "\n\n".join(retrievedChunks)
                    answer = gen.generate_answer(retrievedChunks, context, question, group_id="Dave")
                    print("Answer is : ", answer)
                    print("Expected Answer is : ", expected_answer)
                    self.AssertCheck(answer, expected_answer)

    def AssertCheck(self, answer, expected_answer):
        """
        Compare the actual answer with the expected answer and print the result.

        Args:
            answer (str): The actual answer generated by the system.
            expected_answer (str): The expected correct substring or answer.

        Raises:
            AssertionError: If the answer does not match the expected_answer.
        """
        try:
            self.assertEqual(answer, expected_answer)
            print("--------------Test passed--------------")
        except AssertionError:
            print("--------------Test failed--------------")    

    def groundedChunks(self):
        """
        Test whether the generated answer is grounded in the retrieved document chunks.
    
        Steps:
            - Query the Retriever for the given question.
            - Generate an answer using the Generator.
            - Check if the generated answer appears in the retrieved context.
            - Print the outcome and compare with expected result.

        Prints:
            - Question, answer grounding status, expected outcome, and test result.
        """
        gen = Generator()
        ret = Retriever()
        ret.addDocuments("winnie_the_pooh.txt")
        with open('test_ques_and_ans.jsonl', 'r') as file:
            for line in file:
                line = line.strip()
                item = json.loads(line)
                if item["id"] == "6":
                    question = item.get("question1")
                    retrievedChunks = ret.query(question)
                    context = "\n\n".join(retrievedChunks)
                    testChunks = item.get("retrieved_chunks")
                    answer = gen.generate_answer(retrievedChunks, context, question, group_id="Dave")
                    if answer in context:
                        answer = "Chunks are present"
                        expected_answer = item.get("expected_answer_contains")
                        question = "Is the generated answer is present in the chunks"
                        print("Question is :", question)
                        print("Answer is : ", answer)
                        print("Expected Answer is : ", expected_answer)
                        self.AssertCheck(answer, expected_answer)
                    else:
                        answer = "Chunks are not present"
                        print("Answer is : ", answer)
                        print("Expected Answer is : ", expected_answer)
                        self.AssertCheck(answer, expected_answer)

    def nonEmptyString(self):
        return
    
test = TestGen()
test.test_generator()
test.groundedChunks() 